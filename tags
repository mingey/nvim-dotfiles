!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Users/brobe/AppData/Local/nvim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/5f8901a/
"<C-	init.lua	/^	vim.keymap.set("n", "<C-=>", function()$/;"	f
0	lua/snippets/global.json	/^            "${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}"$/;"	s	array:datetime.body
0	lua/snippets/global.json	/^            "${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}:/;"	s	array:diso.body
0	lua/snippets/global.json	/^            "Copyright (c) ${CURRENT_YEAR} ${0:Author}. All Rights Reserved."$/;"	s	array:copyright.body
0	lua/snippets/global.json	/^        "body": ["${CURRENT_HOUR}:${CURRENT_MINUTE}"],$/;"	s	array:time.body
0	lua/snippets/global.json	/^        "body": ["${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}"],$/;"	s	array:timeHMS.body
0	lua/snippets/global.json	/^        "body": ["${CURRENT_MONTH}\/${CURRENT_DATE}\/${CURRENT_YEAR}"],$/;"	s	array:dateMDY.body
0	lua/snippets/global.json	/^        "body": ["${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}"],$/;"	s	array:date.body
0	lua/snippets/global.json	/^      "body": ["${CURRENT_DATE}\/${CURRENT_MONTH}\/${CURRENT_YEAR}"],$/;"	s	array:dateDMY.body
Strictly personal Neovim config	README.md	/^# Strictly personal Neovim config$/;"	c
body	lua/snippets/global.json	/^        "body": "${UUID}",$/;"	s	object:uuid
body	lua/snippets/global.json	/^        "body": ["${CURRENT_HOUR}:${CURRENT_MINUTE}"],$/;"	a	object:time
body	lua/snippets/global.json	/^        "body": ["${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}"],$/;"	a	object:timeHMS
body	lua/snippets/global.json	/^        "body": ["${CURRENT_MONTH}\/${CURRENT_DATE}\/${CURRENT_YEAR}"],$/;"	a	object:dateMDY
body	lua/snippets/global.json	/^        "body": ["${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}"],$/;"	a	object:date
body	lua/snippets/global.json	/^        "body": [$/;"	a	object:copyright
body	lua/snippets/global.json	/^        "body": [$/;"	a	object:datetime
body	lua/snippets/global.json	/^        "body": [$/;"	a	object:diso
body	lua/snippets/global.json	/^      "body": ["${CURRENT_DATE}\/${CURRENT_MONTH}\/${CURRENT_YEAR}"],$/;"	a	object:dateDMY
callback	lua/mapping.lua	/^	callback = function(args)$/;"	f
change_scale_factor	init.lua	/^	local change_scale_factor = function(delta)$/;"	f
copyright	lua/snippets/global.json	/^    "copyright": {$/;"	o
cr_action	lua/mapping.lua	/^_G.cr_action = function()$/;"	f	unknown:_G
date	lua/snippets/global.json	/^    "date": {$/;"	o
dateDMY	lua/snippets/global.json	/^    "dateDMY": {$/;"	o
dateMDY	lua/snippets/global.json	/^    "dateMDY": {$/;"	o
datetime	lua/snippets/global.json	/^    "datetime": {$/;"	o
description	lua/snippets/global.json	/^        "description": "A Version 4 UUID"$/;"	s	object:uuid
description	lua/snippets/global.json	/^        "description": "I give you back the time (H:M)"$/;"	s	object:time
description	lua/snippets/global.json	/^        "description": "I give you back the time (H:M:S)"$/;"	s	object:timeHMS
description	lua/snippets/global.json	/^        "description": "I give you back the time and date (Y-m-d H:M)"$/;"	s	object:datetime
description	lua/snippets/global.json	/^        "description": "ISO date time stamp"$/;"	s	object:diso
description	lua/snippets/global.json	/^        "description": "Put the date in (Y-m-D) format"$/;"	s	object:date
description	lua/snippets/global.json	/^        "description": "Put the date in (m\/D\/Y) format"$/;"	s	object:dateMDY
description	lua/snippets/global.json	/^        "description": "Snippet to put copyright"$/;"	s	object:copyright
description	lua/snippets/global.json	/^      "description": "Put date in (DD\/MM\/YY) format"$/;"	s	object:dateDMY
diso	lua/snippets/global.json	/^    "diso": {$/;"	o
hooks	init.lua	/^		hooks = { post_checkout = function() vim.cmd('TSUpdate') end },$/;"	f
imap_expr	lua/mapping.lua	/^local imap_expr = function(lhs, rhs)$/;"	f
keycode	lua/mapping.lua	/^local keycode = vim.keycode or function(x)$/;"	f
make_fzf_native	init.lua	/^	local function make_fzf_native(params)$/;"	f
map_split	lua/mapping.lua	/^local map_split = function(buf_id, lhs, direction)$/;"	f
new_target	lua/mapping.lua	/^		local new_target = vim.api.nvim_win_call(cur_target, function()$/;"	f
on_init	init.lua	/^		on_init = function(client)$/;"	f
open_mini_files	lua/mapping.lua	/^local function open_mini_files(arg)$/;"	f
prefix	lua/snippets/global.json	/^        "prefix": "c)",$/;"	s	object:copyright
prefix	lua/snippets/global.json	/^        "prefix": "date",$/;"	s	object:date
prefix	lua/snippets/global.json	/^        "prefix": "dateMDY",$/;"	s	object:dateMDY
prefix	lua/snippets/global.json	/^        "prefix": "datetime",$/;"	s	object:datetime
prefix	lua/snippets/global.json	/^        "prefix": "diso",$/;"	s	object:diso
prefix	lua/snippets/global.json	/^        "prefix": "time",$/;"	s	object:time
prefix	lua/snippets/global.json	/^        "prefix": "timeHMS",$/;"	s	object:timeHMS
prefix	lua/snippets/global.json	/^        "prefix": "uuid",$/;"	s	object:uuid
prefix	lua/snippets/global.json	/^      "prefix": "dateDMY",$/;"	s	object:dateDMY
rhs	lua/mapping.lua	/^	local rhs = function()$/;"	f
set_cwd	lua/mapping.lua	/^local set_cwd = function()$/;"	f
time	lua/snippets/global.json	/^    "time": {$/;"	o
timeHMS	lua/snippets/global.json	/^    "timeHMS": {$/;"	o
uuid	lua/snippets/global.json	/^    "uuid": {$/;"	o
win_config	init.lua	/^local win_config = function() -- displays notifications in bottom right corner$/;"	f
yank_path	lua/mapping.lua	/^local yank_path = function()$/;"	f
